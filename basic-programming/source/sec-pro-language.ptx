<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of Basic Programming
Copyright (C) 2024
Phạm Công Vinh
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-pro-language" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Programming Languages</title>

  <objectives>
    <ul>
      <li>See some examples of different programming languages.</li>
      <li>Learn about <term>high-level</term> and <term>low-level</term> languages.</li>
    </ul>
  </objectives>

  <p>
    <term>A programming language</term> is a system of notation that helps human to create computer programs or, in other words, give instructions to computers. These <q>instructions</q> range from calculating additions and subtractions to data manipulations, <etc></etc>
  </p>

  <p>
    The code cell below is written in <term>Python</term><mdash></mdash>one of the most popular programming languages in the recent years. You can run the code and see the results.
  </p>

  <sage language="python">
    <input>
      print("Hello World!")
    </input>
  </sage>
  <problem>
    <pre>
      Hello World!
    </pre>
  </problem>
  
  <investigation>
    <p></p>
    <p>
      The command <c>print()</c> have a simple job of putting data into the terminal. In this case, that data is the words <q>Hello World!</q>.
    </p>
  </investigation>

  <p>
    Here is another code block written in Python. (You don't have to understand what the code is doing, though it's easy to guess its purpose.)
  </p>

  <program language="python">
    <input>
      a = 0
      while a &lt; 10:
          print(a, end=" ")
          if a % 2 == 0:
              print("is even")
          else:
              print("is odd")
          a += 1
    </input>
  </program>

  <p>
    You can easily see that there are <term>keywords</term> such as <c>while</c>, <c>print</c> <c>end</c>, <c>if</c>, and <c>else</c>. This means Python's syntax includes keywords and features that closely resemble the English language.
  </p>

  <definition xml:id="def-prolang-high-level">
    <statement>
      <p>
        Python is called a <term>high-level</term> programming language because its <term>syntax</term> closely resembles human languages.
      </p>
      <p>
        <term>Syntax</term> simply means the <q>grammar</q> of a programming language. Like human languages, programming languages have their own set of grammatical rules, which are crucial for the computer, something that always follows orders exactly.
      </p>
    </statement>
  </definition>

  <p>
    Therefore, Python is usually recommended to beginners, which is also why it is one of the most well-known programming languages.
  </p>

  <p>
    The following example is written in <term>Assembly</term>. The code when compiled will also output the words <q>Hello World!</q>. (Again, don't try to understand the code. This one is beyond even me.)
  </p>

  <program language="assy">
    <input>
      org  0x100 
      mov  dx, msg
      mov  ah, 9
      int  0x21

      mov  ah, 0x4c
      int  0x21

      msg  db 'Hello World!', 0x0d, 0x0a, '$'
    </input>
  </program>

  <p>
    As you can see, this is almost fully computer language. Assembly needs 7 lines of code to do what Python can do with one.
  </p>

  <definition xml:id="def-prolang-low-level">
    <statement>
      <p>
        So, Assembly is called a <term>low-level</term> programming language, since its syntax is closer to computer languages.
      </p>
    </statement>
  </definition>

  <p>
    In conclusion, the syntax of high-level languages are easier to understand than that of low-level ones. Maybe you would ask <q>Then why should we use low-level languages?</q>
  </p>

  <p>
    There can be many reasons for that, and among them speed is the most obvious one. Basically, code written in high-level languages has to go through more intermediate steps to be translated into machine code (binary) than low-level ones, thus it's obvious that the latter often have a speed advantage.
  </p>
  <p>
    Some other reasons are specialization, complex data manipulation, legacy code, <etc />
  </p>
  
  <insight>
    <p>
      You can imagine a high-level programming language as a 4-seat family car, which is user-friendly and can be driven by most people. Then, a low-level one would be a F1 racing car that only the most skillful professionals can drive.
    </p>
    <p>
      And in return, the <q>low-level</q> F1 racing car will be significantly faster than the <q>high-level</q> family car.
    </p>
  </insight>

  <p>
    However, for <term>beginner-level</term> usage, this speed advantage doesn't really matter. So for you, high-level languages are definitely the way to go.
  </p>

  <note>
    <p>
      In this article, coding examples are written in the high-level language Python, making it easier for you to follow and experiment.
    </p>
    <p>
      But there are also code cells in other programming languages, which can be found in <xref ref="appendix-playground" text="title"></xref>.
    </p>
  </note>

  <p>
    Each programming language has its own set of notations, which is developed in consideration of its purpose. Python is a high-level multi-purpose language used by mathematicians, data scientists, software/game developers and so many more.
  </p>

  <insight>
    <title>Choosing A Programming Language</title>
    <p>
      When getting started with programming, a beginner often comes across certain topics on the Internet:
      <ul>
        <li>
          <p>
            <q>Which programming language should I start with?</q>
          </p>
        </li>
        <li>
          <p>
            <q>Which programming language should I learn in 2024?</q>
          </p>
        </li>
        <li>
          <p>
            <q>Which programming language to learn for high-paying jobs?</q>
          </p>
        </li>
        <li>
          <p>
            <etc></etc>
          </p>
        </li>
      </ul>

      I think these are impractical questions, and I would advise you against that mindset. Instead, you should ask questions such as:

      <ul>
        <li>
          <p>
            <q>What is my purpose in learning a new programming language?</q>
          </p>
        </li>
        <li>
          <p>
            <q>For that purpose, which programming language is suitable?</q>
          </p>
        </li>
        <li>
          <p>
            <q>For that purpose and considering my current level, do I want to learn a high-level or low-level language?</q>
          </p>
        </li>
        <li>
          <p>
            <etc></etc>
          </p>
        </li>
      </ul>

      Currently there are an ever-growing number of programming languages, and each of them has its own <em>purposes, pros, and cons</em>.
    </p>
  </insight>

</section>